# const typeDefs = gql`
 type User {
    id: ID!
    fullName: String!
    role: Role!
    email: String!
    password: String!
    access: Boolean
    createdAt: String
    updatedAt: String
 }

  type Product {
  id: String
  productID: String
  productName: String
  description: String
  price: Float
  category: Category
  createdBy: String
  createdAt: String
  updatedAt: String
  }

  type Category {
    id: String
    name: String
    description: String
    products: [Product]
    createdAt: String
    updatedAt: String
  }

   input UserInput {
    fullName: String!
    email: String!
    password: String!
    role: Role!
    access: Boolean
  }

  input SignInInput {
    email: String!
    password: String!
  }

  type StatusMessage {
    success: String
  }

  type Payload {
    id: String
    token: String,
    fullName: String
    role: String
    access: String
  }

  type Query {
    users: [User!]!
    user(id: ID!): User

    # development only
    clearAll: StatusMessage
  }
  
  type Mutation {
    addUser(input: UserInput!) : User!
    signIn(input: SignInInput!): Payload

    # super user mutations
    register(input: UserInput): Payload  
  }

  enum Role {
    ADMIN
    SUPER_ADMIN
    USER 
    MODERATOR
  }


# `;