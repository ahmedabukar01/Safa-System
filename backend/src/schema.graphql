# const typeDefs = gql`
scalar Date

 type User {
    id: ID!
    fullName: String!
    role: Role!
    email: String!
    adminBy: String
    password: String!
    access: Boolean
    lastLogged: Date
    createdAt: Date
    updatedAt: Date
 }

  type Product {
  id: String
  productID: String
  productName: String
  price: Float
  category: Category
  createdBy: String
  createdAt: Date
  updatedAt: Date
  }

  type Category {
    id: String
    name: String
    description: String
    createdBy: String
    products: [Product]
    createdAt: Date
    updatedAt: Date
  }

   input UserInput {
    fullName: String!
    email: String!
    password: String!
    role: Role!
    access: Boolean
    adminBy: String
  }

  input UserInputWithAdminId {
    adminBy: String!
    data: UserInput
  }

  input SignInInput {
    email: String!
    password: String!
  }
  input CategoryInput {
    name: String!
    description: String
  }

# becuase of this, name is required in category input creation.
  input UpdateCategory {
    name: String
    description: String
  }

  input UpdateCategoryInput {
    id: String!,
    data: UpdateCategory
  }

  input ProductInput {
  productID: String!
  productName: String!
  price: Float!
  categoryId: String!
  }

  input OrderInfoInput {
  productID: String!
  productName: String!
  price: Float!
  amount: Float
  }

  input PaymentInput {
    items: [OrderInfoInput]
    total: Float
  }

  input UpdateProductInput {
  productID: String
  productName: String
  description: String
  price: Float
  categoryId: String
  }

  type StatusMessage {
    success: String
  }

  type OrderInfo {
  productID: String!
  productName: String!
  price: Float!
  amount: Float
  }

  type Payment {
    id: String
    total: Float
    items: [OrderInfo]
    createdBy: String
    createdAt: Date
  }

  type Payload {
    id: String
    token: String
    fullName: String
    role: String
    access: String
  }

  type Query {
    users: [User!]!
    user(id: ID!): User
    categories: [Category]
    category(id: ID!): Category
    products: [Product]!
    product(id: ID!): Product
    payments: [Payment]
    adminsOnly: [User]!
    # refreshToken: StatusMessage

    # development only
    clearAll: StatusMessage
  }
  
  type Mutation {
    addUser(input: UserInputWithAdminId!) : User!
    signIn(input: SignInInput!): Payload
    createCategory(input: CategoryInput!): Category
    updateCategory(input: UpdateCategoryInput): Category
    deleteCategory(id: ID!): StatusMessage
    createProduct(input: ProductInput!): Product
    updateProduct(input: UpdateProductInput): Product
    deleteProduct(id: ID!): StatusMessage
    logout: StatusMessage
    createPayment(input: PaymentInput!): StatusMessage

    # super user mutations
    register(input: UserInput): Payload  
  }

  enum Role {
    ADMIN
    SUPER_ADMIN
    USER 
    MODERATOR
  }


# `;