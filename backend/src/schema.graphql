# const typeDefs = gql`
 type User {
    id: ID!
    fullName: String!
    role: Role!
    email: String!
    adminBy: String
    password: String!
    access: Boolean
    createdAt: String
    updatedAt: String
 }

  type Product {
  id: String
  productID: String
  productName: String
  description: String
  price: Float
  category: Category
  createdBy: String
  createdAt: String
  updatedAt: String
  }

  type Category {
    id: String
    name: String
    description: String
    createdBy: String
    products: [Product]
    createdAt: String
    updatedAt: String
  }

   input UserInput {
    fullName: String!
    email: String!
    password: String!
    role: Role!
    access: Boolean
  }

  input UserInputWithAdminId {
    adminBy: String!
    data: UserInput
  }

  input SignInInput {
    email: String!
    password: String!
  }
  input CategoryInput {
    name: String!
    description: String
  }

# becuase of this, name is required in category input creation.
  input UpdateCategory {
    name: String
    description: String
  }

  input UpdateCategoryInput {
    id: String!,
    data: UpdateCategory
  }

  type StatusMessage {
    success: String
  }

  type Payload {
    id: String
    token: String,
    fullName: String
    role: String
    access: String
  }

  type Query {
    users: [User!]!
    user(id: ID!): User
    categories: [Category]
    category(id: ID!): Category

    # development only
    clearAll: StatusMessage
  }
  
  type Mutation {
    addUser(input: UserInputWithAdminId!) : User!
    signIn(input: SignInInput!): Payload
    createCategory(input: CategoryInput!): Category
    updateCategory(input: UpdateCategoryInput): Category
    deleteCategory(id: ID!): StatusMessage


    # super user mutations
    register(input: UserInput): Payload  
  }

  enum Role {
    ADMIN
    SUPER_ADMIN
    USER 
    MODERATOR
  }


# `;